# This file is used to build ninja itself.
# It is generated by configure.py.

ninja_required_version = 1.3

# The arguments passed to configure.py, for rerunning it.
configure_args = 

sourcedir = C:\work\ninja
builddir = build
cxx = cl
ar = link
cflags = /nologo /Zi /W4 /WX /wd4530 /wd4100 /wd4706 /wd4512 /wd4800 $
    /wd4702 /wd4819 /wd4355 /wd4091 /GR- /wd4267 /DNOMINMAX $
    /D_CRT_SECURE_NO_WARNINGS /DNINJA_PYTHON="python.exe" /FS /Ox /DNDEBUG $
    /GL -I.
ldflags = /DEBUG /libpath:$builddir /LTCG /OPT:REF /OPT:ICF

rule cxx
  command = $cxx $cflags -c $in /Fo$out
  description = CXX $out
  deps = msvc

rule ar
  command = lib /nologo /ltcg /out:$out $in
  description = LIB $out

rule link
  command = $cxx $in $libs /nologo /link $ldflags /out:$out
  description = LINK $out

# the depfile parser and ninja lexers are generated using re2c.

# Core source files all build into ninja library.
build $builddir\build.obj: cxx $sourcedir\src\build.cc
build $builddir\build_log.obj: cxx $sourcedir\src\build_log.cc
build $builddir\clean.obj: cxx $sourcedir\src\clean.cc
build $builddir\debug_flags.obj: cxx $sourcedir\src\debug_flags.cc
build $builddir\depfile_parser.obj: cxx $sourcedir\src\depfile_parser.cc
build $builddir\deps_log.obj: cxx $sourcedir\src\deps_log.cc
build $builddir\disk_interface.obj: cxx $sourcedir\src\disk_interface.cc
build $builddir\edit_distance.obj: cxx $sourcedir\src\edit_distance.cc
build $builddir\eval_env.obj: cxx $sourcedir\src\eval_env.cc
build $builddir\graph.obj: cxx $sourcedir\src\graph.cc
build $builddir\graphviz.obj: cxx $sourcedir\src\graphviz.cc
build $builddir\lexer.obj: cxx $sourcedir\src\lexer.cc
build $builddir\line_printer.obj: cxx $sourcedir\src\line_printer.cc
build $builddir\manifest_parser.obj: cxx $sourcedir\src\manifest_parser.cc
build $builddir\metrics.obj: cxx $sourcedir\src\metrics.cc
build $builddir\state.obj: cxx $sourcedir\src\state.cc
build $builddir\util.obj: cxx $sourcedir\src\util.cc
build $builddir\version.obj: cxx $sourcedir\src\version.cc
build $builddir\subprocess-win32.obj: cxx $sourcedir\src\subprocess-win32.cc
build $builddir\includes_normalize-win32.obj: cxx $
    $sourcedir\src\includes_normalize-win32.cc
build $builddir\msvc_helper-win32.obj: cxx $sourcedir\src\msvc_helper-win32.cc
build $builddir\msvc_helper_main-win32.obj: cxx $
    $sourcedir\src\msvc_helper_main-win32.cc
build $builddir\minidump-win32.obj: cxx $sourcedir\src\minidump-win32.cc
build $builddir\getopt.obj: cxx $sourcedir\src\getopt.c
build $builddir\ninja.lib: ar $builddir\build.obj $builddir\build_log.obj $
    $builddir\clean.obj $builddir\debug_flags.obj $
    $builddir\depfile_parser.obj $builddir\deps_log.obj $
    $builddir\disk_interface.obj $builddir\edit_distance.obj $
    $builddir\eval_env.obj $builddir\graph.obj $builddir\graphviz.obj $
    $builddir\lexer.obj $builddir\line_printer.obj $
    $builddir\manifest_parser.obj $builddir\metrics.obj $builddir\state.obj $
    $builddir\util.obj $builddir\version.obj $builddir\subprocess-win32.obj $
    $builddir\includes_normalize-win32.obj $builddir\msvc_helper-win32.obj $
    $builddir\msvc_helper_main-win32.obj $builddir\minidump-win32.obj $
    $builddir\getopt.obj

# Main executable is library plus main() function.
build $builddir\ninja.obj: cxx $sourcedir\src\ninja.cc
build ninja.exe: link $builddir\ninja.obj | $builddir\ninja.lib
  libs = ninja.lib

# Tests all build into ninja_test executable.
build $builddir\build_log_test.obj: cxx $sourcedir\src\build_log_test.cc
build $builddir\build_test.obj: cxx $sourcedir\src\build_test.cc
build $builddir\clean_test.obj: cxx $sourcedir\src\clean_test.cc
build $builddir\depfile_parser_test.obj: cxx $
    $sourcedir\src\depfile_parser_test.cc
build $builddir\deps_log_test.obj: cxx $sourcedir\src\deps_log_test.cc
build $builddir\disk_interface_test.obj: cxx $
    $sourcedir\src\disk_interface_test.cc
build $builddir\edit_distance_test.obj: cxx $
    $sourcedir\src\edit_distance_test.cc
build $builddir\graph_test.obj: cxx $sourcedir\src\graph_test.cc
build $builddir\lexer_test.obj: cxx $sourcedir\src\lexer_test.cc
build $builddir\manifest_parser_test.obj: cxx $
    $sourcedir\src\manifest_parser_test.cc
build $builddir\ninja_test.obj: cxx $sourcedir\src\ninja_test.cc
build $builddir\state_test.obj: cxx $sourcedir\src\state_test.cc
build $builddir\subprocess_test.obj: cxx $sourcedir\src\subprocess_test.cc
build $builddir\test.obj: cxx $sourcedir\src\test.cc
build $builddir\util_test.obj: cxx $sourcedir\src\util_test.cc
build $builddir\includes_normalize_test.obj: cxx $
    $sourcedir\src\includes_normalize_test.cc
build $builddir\msvc_helper_test.obj: cxx $sourcedir\src\msvc_helper_test.cc
build ninja_test: phony ninja_test.exe
build ninja_test.exe: link $builddir\build_log_test.obj $
    $builddir\build_test.obj $builddir\clean_test.obj $
    $builddir\depfile_parser_test.obj $builddir\deps_log_test.obj $
    $builddir\disk_interface_test.obj $builddir\edit_distance_test.obj $
    $builddir\graph_test.obj $builddir\lexer_test.obj $
    $builddir\manifest_parser_test.obj $builddir\ninja_test.obj $
    $builddir\state_test.obj $builddir\subprocess_test.obj $
    $builddir\test.obj $builddir\util_test.obj $
    $builddir\includes_normalize_test.obj $builddir\msvc_helper_test.obj | $
    $builddir\ninja.lib
  libs = ninja.lib

# Ancillary executables.
build $builddir\build_log_perftest.obj: cxx $
    $sourcedir\src\build_log_perftest.cc
build build_log_perftest: phony build_log_perftest.exe
build build_log_perftest.exe: link $builddir\build_log_perftest.obj | $
    $builddir\ninja.lib
  libs = ninja.lib
build $builddir\canon_perftest.obj: cxx $sourcedir\src\canon_perftest.cc
build canon_perftest: phony canon_perftest.exe
build canon_perftest.exe: link $builddir\canon_perftest.obj | $
    $builddir\ninja.lib
  libs = ninja.lib
build $builddir\depfile_parser_perftest.obj: cxx $
    $sourcedir\src\depfile_parser_perftest.cc
build depfile_parser_perftest: phony depfile_parser_perftest.exe
build depfile_parser_perftest.exe: link $
    $builddir\depfile_parser_perftest.obj | $builddir\ninja.lib
  libs = ninja.lib
build $builddir\hash_collision_bench.obj: cxx $
    $sourcedir\src\hash_collision_bench.cc
build hash_collision_bench: phony hash_collision_bench.exe
build hash_collision_bench.exe: link $builddir\hash_collision_bench.obj | $
    $builddir\ninja.lib
  libs = ninja.lib
build $builddir\manifest_parser_perftest.obj: cxx $
    $sourcedir\src\manifest_parser_perftest.cc
build manifest_parser_perftest: phony manifest_parser_perftest.exe
build manifest_parser_perftest.exe: link $
    $builddir\manifest_parser_perftest.obj | $builddir\ninja.lib
  libs = ninja.lib

# Generate a graph using the "graph" tool.
rule gendot
  command = ./ninja -t graph all > $out
rule gengraph
  command = dot -Tpng $in > $out
build $builddir\graph.dot: gendot ninja build.ninja
build graph.png: gengraph $builddir\graph.dot

# Generate the manual using asciidoc.
rule asciidoc
  command = asciidoc -b docbook -d book -o $out $in
  description = ASCIIDOC $out
rule xsltproc
  command = xsltproc --nonet doc/docbook.xsl $in > $out
  description = XSLTPROC $out
build $builddir\manual.xml: asciidoc $sourcedir\doc\manual.asciidoc
build $sourcedir\doc\manual.html: xsltproc $builddir\manual.xml | $
    $sourcedir\doc\style.css
build manual: phony || $sourcedir\doc\manual.html

# Generate Doxygen.
rule doxygen
  command = doxygen $in
  description = DOXYGEN $in
doxygen_mainpage_generator = $sourcedir\src\gen_doxygen_mainpage.sh
rule doxygen_mainpage
  command = $doxygen_mainpage_generator $in > $out
  description = DOXYGEN_MAINPAGE $out
build $builddir\doxygen_mainpage: doxygen_mainpage README COPYING | $
    $doxygen_mainpage_generator
build doxygen: doxygen $sourcedir\doc\doxygen.config | $
    $builddir\doxygen_mainpage

# Regenerate build files if build script changes.
rule configure
  command = ${configure_env}python.exe $sourcedir/configure.py $configure_args
  generator = 1
build build.ninja: configure | $sourcedir/configure.py $
    $sourcedir\misc\ninja_syntax.py

default ninja.exe

build all: phony ninja.exe ninja_test.exe build_log_perftest.exe $
    canon_perftest.exe depfile_parser_perftest.exe hash_collision_bench.exe $
    manifest_parser_perftest.exe
