# generated with love by buildfox from fox_core.fox
# ----------------------------------------------------------------------
# buildfox core configuration
# this file :
# - specifies compiler settings for current platform
# - create rules
# - configure auto keyword
# ----------------------------------------------------------------------
# figure out compiler commands
# ----------------------------------------------------------------------
# write rules
rule cc
  command = $cc
  deps = $deps
  depfile = $depfile
rule cxx
  command = $cxx
  deps = $deps
  depfile = $depfile
rule link
  command = $link
# ----------------------------------------------------------------------
# configure auto keyword
# generated with love by buildfox from fox_parser_test.ninja
# This file is used to build ninja itself.
# It is generated by configure.py.
a = 1
b = 2
rule kkkk
  c = 3
  e = 10
d = 4
build : cc
ninja_required_version = 1.3
# The arguments passed to configure.py, for rerunning it.
configure_args = 
sourcedir = C:\work\ninja
builddir = build
cxx = cl
ar = link
cflags = /nologo /Zi /W4 /WX /wd4530 /wd4100 /wd4706 /wd4512 /wd4800     /wd4702 /wd4819 /wd4355 /wd4091 /GR- /wd4267 /DNOMINMAX     /D_CRT_SECURE_NO_WARNINGS /DNINJA_PYTHON="python.exe" /FS /Ox /DNDEBUG     /GL -I.
ldflags = /DEBUG /libpath:$builddir /LTCG /OPT:REF /OPT:ICF
rule cxx
  command = $cxx $cflags -c $in /Fo$out
  description = CXX $out
  deps = msvc
rule ar
  command = lib /nologo /ltcg /out:$out $in
  description = LIB $out
rule link
  command = $cxx $in $libs /nologo /link $ldflags /out:$out
  description = LINK $out
# the depfile parser and ninja lexers are generated using re2c.
# Core source files all build into ninja library.
build build/build.obj: cxx C$:/work/ninja/src/build.cc
build build/build_log.obj: cxx C$:/work/ninja/src/build_log.cc
build build/clean.obj: cxx C$:/work/ninja/src/clean.cc
build build/debug_flags.obj: cxx C$:/work/ninja/src/debug_flags.cc
build build/depfile_parser.obj: cxx C$:/work/ninja/src/depfile_parser.cc
build build/deps_log.obj: cxx C$:/work/ninja/src/deps_log.cc
build build/disk_interface.obj: cxx C$:/work/ninja/src/disk_interface.cc
build build/edit_distance.obj: cxx C$:/work/ninja/src/edit_distance.cc
build build/eval_env.obj: cxx C$:/work/ninja/src/eval_env.cc
build build/graph.obj: cxx C$:/work/ninja/src/graph.cc
build build/graphviz.obj: cxx C$:/work/ninja/src/graphviz.cc
build build/lexer.obj: cxx C$:/work/ninja/src/lexer.cc
build build/line_printer.obj: cxx C$:/work/ninja/src/line_printer.cc
build build/manifest_parser.obj: cxx C$:/work/ninja/src/manifest_parser.cc
build build/metrics.obj: cxx C$:/work/ninja/src/metrics.cc
build build/state.obj: cxx C$:/work/ninja/src/state.cc
build build/util.obj: cxx C$:/work/ninja/src/util.cc
build build/version.obj: cxx C$:/work/ninja/src/version.cc
build build/subprocess-win32.obj: cxx C$:/work/ninja/src/subprocess-win32.cc
build build/includes_normalize-win32.obj: cxx C$:/work/ninja/src/includes_normalize-win32.cc
build build/msvc_helper-win32.obj: cxx C$:/work/ninja/src/msvc_helper-win32.cc
build build/msvc_helper_main-win32.obj: cxx C$:/work/ninja/src/msvc_helper_main-win32.cc
build build/minidump-win32.obj: cxx C$:/work/ninja/src/minidump-win32.cc
build build/getopt.obj: cxx C$:/work/ninja/src/getopt.c
build build/ninja.lib: ar build/build.obj build/build_log.obj build/clean.obj build/debug_flags.obj build/depfile_parser.obj build/deps_log.obj build/disk_interface.obj build/edit_distance.obj build/eval_env.obj build/getopt.obj build/graph.obj build/graphviz.obj build/includes_normalize-win32.obj build/lexer.obj build/line_printer.obj build/manifest_parser.obj build/metrics.obj build/minidump-win32.obj build/msvc_helper-win32.obj build/msvc_helper_main-win32.obj build/state.obj build/subprocess-win32.obj build/util.obj build/version.obj
# Main executable is library plus main() function.
build build/ninja.obj: cxx C$:/work/ninja/src/ninja.cc
build ninja.exe: link build/ninja.obj | build/ninja.lib
  libs = ninja.lib
# Tests all build into ninja_test executable.
build build/build_log_test.obj: cxx C$:/work/ninja/src/build_log_test.cc
build build/build_test.obj: cxx C$:/work/ninja/src/build_test.cc
build build/clean_test.obj: cxx C$:/work/ninja/src/clean_test.cc
build build/depfile_parser_test.obj: cxx C$:/work/ninja/src/depfile_parser_test.cc
build build/deps_log_test.obj: cxx C$:/work/ninja/src/deps_log_test.cc
build build/disk_interface_test.obj: cxx C$:/work/ninja/src/disk_interface_test.cc
build build/edit_distance_test.obj: cxx C$:/work/ninja/src/edit_distance_test.cc
build build/graph_test.obj: cxx C$:/work/ninja/src/graph_test.cc
build build/lexer_test.obj: cxx C$:/work/ninja/src/lexer_test.cc
build build/manifest_parser_test.obj: cxx C$:/work/ninja/src/manifest_parser_test.cc
build build/ninja_test.obj: cxx C$:/work/ninja/src/ninja_test.cc
build build/state_test.obj: cxx C$:/work/ninja/src/state_test.cc
build build/subprocess_test.obj: cxx C$:/work/ninja/src/subprocess_test.cc
build build/test.obj: cxx C$:/work/ninja/src/test.cc
build build/util_test.obj: cxx C$:/work/ninja/src/util_test.cc
build build/includes_normalize_test.obj: cxx C$:/work/ninja/src/includes_normalize_test.cc
build build/msvc_helper_test.obj: cxx C$:/work/ninja/src/msvc_helper_test.cc
build ninja_test: phony ninja_test.exe
build ninja_test.exe: link build/build_log_test.obj build/build_test.obj build/clean_test.obj build/depfile_parser_test.obj build/deps_log_test.obj build/disk_interface_test.obj build/edit_distance_test.obj build/graph_test.obj build/includes_normalize_test.obj build/lexer_test.obj build/manifest_parser_test.obj build/msvc_helper_test.obj build/ninja_test.obj build/state_test.obj build/subprocess_test.obj build/test.obj build/util_test.obj | build/ninja.lib
  libs = ninja.lib
# Ancillary executables.
build build/build_log_perftest.obj: cxx C$:/work/ninja/src/build_log_perftest.cc
build build_log_perftest: phony build_log_perftest.exe
build build_log_perftest.exe: link build/build_log_perftest.obj | build/ninja.lib
  libs = ninja.lib
build build/canon_perftest.obj: cxx C$:/work/ninja/src/canon_perftest.cc
build canon_perftest: phony canon_perftest.exe
build canon_perftest.exe: link build/canon_perftest.obj | build/ninja.lib
  libs = ninja.lib
build build/depfile_parser_perftest.obj: cxx C$:/work/ninja/src/depfile_parser_perftest.cc
build depfile_parser_perftest: phony depfile_parser_perftest.exe
build depfile_parser_perftest.exe: link build/depfile_parser_perftest.obj | build/ninja.lib
  libs = ninja.lib
build build/hash_collision_bench.obj: cxx C$:/work/ninja/src/hash_collision_bench.cc
build hash_collision_bench: phony hash_collision_bench.exe
build hash_collision_bench.exe: link build/hash_collision_bench.obj | build/ninja.lib
  libs = ninja.lib
build build/manifest_parser_perftest.obj: cxx C$:/work/ninja/src/manifest_parser_perftest.cc
build manifest_parser_perftest: phony manifest_parser_perftest.exe
build manifest_parser_perftest.exe: link build/manifest_parser_perftest.obj | build/ninja.lib
  libs = ninja.lib
# Generate a graph using the "graph" tool.
rule gendot
  command = ./ninja -t graph all > $out
rule gengraph
  command = dot -Tpng $in > $out
build build/graph.dot: gendot build.ninja ninja
build graph.png: gengraph build/graph.dot
# Generate the manual using asciidoc.
rule asciidoc
  command = asciidoc -b docbook -d book -o $out $in
  description = ASCIIDOC $out
rule xsltproc
  command = xsltproc --nonet doc/docbook.xsl $in > $out
  description = XSLTPROC $out
build build/manual.xml: asciidoc C$:/work/ninja/doc/manual.asciidoc
build C$:/work/ninja/doc/manual.html: xsltproc build/manual.xml | C$:/work/ninja/doc/style.css
build manual: phony || C$:/work/ninja/doc/manual.html
# Generate Doxygen.
rule doxygen
  command = doxygen $in
  description = DOXYGEN $in
doxygen_mainpage_generator = $sourcedir\src\gen_doxygen_mainpage.sh
rule doxygen_mainpage
  command = $doxygen_mainpage_generator $in > $out
  description = DOXYGEN_MAINPAGE $out
build build/doxygen_mainpage: doxygen_mainpage COPYING README | C$:/work/ninja/src/gen_doxygen_mainpage.sh
build doxygen: doxygen C$:/work/ninja/doc/doxygen.config | build/doxygen_mainpage
# Regenerate build files if build script changes.
rule configure
  command = ${configure_env}python.exe $sourcedir/configure.py $configure_args
  generator = 1
build build.ninja: configure | C$:/work/ninja/configure.py C$:/work/ninja/misc/ninja_syntax.py
default ninja.exe
build all: phony build_log_perftest.exe canon_perftest.exe depfile_parser_perftest.exe hash_collision_bench.exe manifest_parser_perftest.exe ninja.exe ninja_test.exe